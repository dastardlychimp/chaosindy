#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do 
  TARGET="$(readlink "$SOURCE")"
  if [[ $SOURCE == /* ]]; then
    SOURCE="$TARGET"
  else
    DIR="$( dirname "$SOURCE" )"
    SOURCE="$DIR/$TARGET"
  fi
done
RDIR="$( dirname "$SOURCE" )"
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Pass parameters to experiment via the environment
export CHAOS_SEED=000000000000000000000000Trustee1
export CHAOS_GENESIS_FILE=/home/ubuntu/chaosindy/pool_transactions_genesis
export CHAOS_VALIDATOR_NODES='["Node1", "Node2", "Node3", "Node4", "Node5", "Node6", "Node7", "Node8", "Node9", "Node10"]'
export CHAOS_WRITE_NYM_TIMEOUT=30
# IMPORTANT! Must not induce catchup on more than f nodes. Doing so (i.e. 4 of
#            10) causes the cluster to not reach consensus while running the load
#            script.
export CHAOS_CATCHUP_COUNT=3
export CHAOS_LOAD_CLIENTS='["Client1", "Client2"]'
#export CHAOS_LOAD_COMMAND='/usr/bin/python3 /home/ubuntu/indy-node/scripts/performance/perf_processes.py -c 2 -n 2 -k nym -g /home/ubuntu/pool_transactions_genesis'
export CHAOS_LOAD_CLIENT_COUNT=20
export CHAOS_LOAD_TRANSACTIONS_PER_CLIENT=20
# This is the number of CHAOS_LOAD_CLIENTS (client nodes running the load script)
# * CHAOS_LOAD_CLIENT_COUNT (processes or virtual clients spawned on each client
# node) * CHAOS_LOAD_TRANSACTIONS_PER_CLIENT (each process/virtual client writes
# this many nyms to the ledger
export CHAOS_LOAD_TRANSACTIONS=800
export CHAOS_LOAD_COMMAND="/usr/bin/python3 /home/ubuntu/indy-node/scripts/performance/perf_processes.py -c ${CHAOS_LOAD_CLIENT_COUNT} -n ${CHAOS_LOAD_TRANSACTIONS_PER_CLIENT} -k nym -g /home/ubuntu/pool_transactions_genesis >/dev/null 2>&1"
export CHAOS_LOAD_COMMAND_TIMEOUT=120
export CHAOS_PAUSE_BEFORE_SYNCED_CHECK=360
export CHAOS_CLEANUP=

export PYTHONPATH=/home/ubuntu/chaosindy

sudo rm -rf ~/.indy_client

echo CHAOS_SEED=${CHAOS_SEED}
echo CHAOS_GENESIS_FILE=${CHAOS_GENESIS_FILE}
echo CHAOS_VALIDATOR_NODES=${CHAOS_VALIDATOR_NODES}
echo CHAOS_WRITE_NYM_TIMEOUT=${CHAOS_WRITE_NYM_TIMEOUT}
echo CHAOS_CATCHUP_COUNT=${CHAOS_CATCHUP_COUNT}
echo CHAOS_LOAD_CLIENTS=${CHAOS_LOAD_CLIENTS}
echo CHAOS_LOAD_CLIENT_COUNT=${CHAOS_LOAD_CLIENT_COUNT}
echo CHAOS_LOAD_TRANSACTIONS_PER_CLIENT=${CHAOS_LOAD_TRANSACTIONS_PER_CLIENT}
echo CHAOS_LOAD_TRANSACTIONS=${CHAOS_LOAD_TRANSACTIONS}
echo CHAOS_LOAD_COMMAND=${CHAOS_LOAD_COMMAND}
echo CHAOS_LOAD_COMMAND_TIMEOUT=${CHAOS_LOAD_COMMAND_TIMEOUT}
echo CHAOS_PAUSE_BEFORE_SYNCED_CHECK=${CHAOS_PAUSE_BEFORE_SYNCED_CHECK}
echo CHAOS_CLEANUP=${CHAOS_CLEANUP}
echo PYTHONPATH=${PYTHONPATH}

# Run the experiment
chaos --verbose run ${DIR}/../experiments/force-catchup-service-down.json
