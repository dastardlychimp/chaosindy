#!/usr/bin/env bash

# Pass parameters to experiment via the environment
# Default parameters are as follows:
export CHAOS_SEED=000000000000000000000000Trustee1
export CHAOS_GENESIS_FILE=/home/ubuntu/chaosindy/pool_transactions_genesis
export CHAOS_VALIDATOR_NODES='["Node1", "Node2", "Node3", "Node4", "Node5", "Node6", "Node7", "Node8", "Node9", "Node10"]'
export CHAOS_WRITE_NYM_TIMEOUT=60
export CHAOS_CLEANUP=
export PYTHONPATH=/home/ubuntu/chaosindy
number_of_executions=1

usage(){
    echo "Usage: $0"
    echo " required arguments: None"
    echo " optional arguments:"
    echo "   -c|--cleanup"
    echo "       Remove temporary files/directories created by the experiment?"
    echo "       Default: Yes"
    echo "       Valid Inputs (case insensitive): yes, y, 1, no, n, 0"
    echo "   -e|--execution-count"
    echo "       How many times to run the experiment."
    echo "       Default: ${number_of_executions}"
    echo "       Valid Input: Any positive number >= 1"
    echo "   -g|--genesis-file"
    echo "       Path to the target pool genesis transaction file."
    echo "       Default: ${CHAOS_GENESIS_FILE}"
    echo "   -h|--help"
    echo "       Print script help/usage"
    echo "   -n|--validator-nodes"
    echo "       A JSON list of node names to include in the experiment. Usually"
    echo "         the complete list from the genesis file. TODO: derive default"
    echo "         from genesis file."
    echo "       Default: '${CHAOS_VALIDATOR_NODES}'"
    echo "   -t|--write-nym-timeout"
    echo "       How long to wait (seconds) before timing out while writing a NYM"
    echo "         transaction."
    echo "       Default: ${CHAOS_WRITE_NYM_TIMEOUT}"
    echo "       Valid Input: Any positive number >= 1"
    echo "   -s|--seed"
    echo "       Seed to use to create DID/Verkey pair used to get validator info"
    echo "         via indy-cli. Must be a Trustee or Steward seed."
    echo "       Default: ${CHAOS_SEED}"
    echo "       Valid Input: A 32 byte string. See default above for an example."
    exit 1
}

# Get this script's directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  TARGET="$(readlink "$SOURCE")"
  if [[ $SOURCE == /* ]]; then
    SOURCE="$TARGET"
  else
    DIR="$( dirname "$SOURCE" )"
    SOURCE="$DIR/$TARGET"
  fi
done
RDIR="$( dirname "$SOURCE" )"
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Remove the wallet used by indy-cli. The experiment will create a new one.
sudo rm -rf ~/.indy_client

# Parse arguments; preserving positional arguments
# Positional arguments are assumed if the 'key' is not found in the following
# case statement
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -c|--cleanup)
    export CHAOS_CLEANUP="$2"
    shift # past argument
    shift # past value
    ;;
    -e|--execution-count)
    number_of_executions=$2
    shift # past argument
    shift # past value
    ;;
    -g|--genesis-file)
    export CHAOS_GENESIS_FILE="$2"
    shift # past argument
    shift # past value
    ;;
    -h|--help)
    usage
    shift # past argument
    ;;
    -n|--validator-nodes)
    export CHAOS_VALIDATOR_NODES='$2'
    shift # past argument
    shift # past value
    ;;
    -t|--write-nym-timeout)
    export CHAOS_WRITE_NYM_TIMEOUT=$2
    shift # past argument
    shift # past value
    ;;
    -s|--seed)
    export CHAOS_SEED="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters. May be useful for customizing call to chaos binary.

echo CHAOS_SEED=${CHAOS_SEED}
echo CHAOS_GENESIS_FILE=${CHAOS_GENESIS_FILE}
echo CHAOS_VALIDATOR_NODES=${CHAOS_VALIDATOR_NODES}
echo CHAOS_WRITE_NYM_TIMEOUT=${CHAOS_WRITE_NYM_TIMEOUT}
echo CHAOS_CLEANUP=${CHAOS_CLEANUP}
echo PYTHONPATH=${PYTHONPATH}
echo number_of_executions=${number_of_executions}

# Run the experiment
for i in $(seq 1 ${number_of_executions})
do
  echo "********************** Experiment Iteration $i ********************"
  exec 5>&1
  result=$(chaos --verbose run ${DIR}/../experiments/force-view-change.json 2>&1 | tee >(cat - >&5))

  echo "Check for failed experiment..."
  echo "Begin printing captured results..."
  echo "$result"
  echo "End printing captured results..."
  if [ $? != 0 ]
  then
    echo "Failed to write nym after $i iteration(s)"
    exit 1
  fi
  if echo "$result" | grep "Experiment ended with status: failed"
  then
    echo "Failed to write nym after $i iteration(s)"
    exit 1
  fi
done
